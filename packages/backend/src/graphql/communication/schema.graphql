extend type Query {
  messages(input: MessagesInput!): [Message!] @requireAuthentication
}

extend type Mutation {
  sendMessage(input: SendMessageInput!): SendMessageResponse @requireAuthentication
}

type Room {
  id: Int!
  name: String
  users: [User!]
  channel: Channel
  lastMessage: Message
  createdAt: String
}

type Message {
  id: Int!
  body: String
  files: [File!]
  isNotification: Boolean
  user: User
  createdAt: String
}

type File {
  id: Int!
  key: String
  name: String
  message: Message
}

type SendMessageResponse implements MutationResponse {
  code: String!
  message: String!
}

input FileInput {
  key: String!
  name: String!
}

input MessagesInput {
  roomID: Int!
}

input SendMessageInput {
  roomID: Int!
  body: String!
  files: [FileInput!]
}
